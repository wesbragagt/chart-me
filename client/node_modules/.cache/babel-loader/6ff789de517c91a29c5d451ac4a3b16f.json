{"ast":null,"code":"var _jsxFileName = \"/Users/weslleybraga/Documents/GitHub/chart-me/client/src/components/SDrawer/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { FaMusic } from 'react-icons/fa';\nimport ListItem from '@material-ui/core/ListItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  list: {\n    width: 250\n  },\n  fullList: {\n    width: 'auto'\n  },\n  root: {\n    overflowY: 'auto'\n  }\n});\nexport default function SDrawer({\n  charts = [],\n  handleSelectChart\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false\n  });\n\n  const toggleDrawer = (anchor, open) => event => {\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState({ ...state,\n      [anchor]: open\n    });\n  };\n\n  const list = anchor => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: clsx(classes.list, {\n      [classes.fullList]: anchor === 'top' || anchor === 'bottom'\n    }),\n    role: \"presentation\",\n    onClick: toggleDrawer(anchor, false),\n    onKeyDown: toggleDrawer(anchor, false),\n    children: /*#__PURE__*/_jsxDEV(List, {\n      children: charts && (charts === null || charts === void 0 ? void 0 : charts.map((chart, i) => /*#__PURE__*/_jsxDEV(ListItem, {\n        button: true,\n        onClick: () => handleSelectChart(chart.id),\n        children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n          children: /*#__PURE__*/_jsxDEV(FaMusic, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: chart === null || chart === void 0 ? void 0 : chart.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this)]\n      }, `${i}-${chart === null || chart === void 0 ? void 0 : chart.title}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: toggleDrawer('left', true),\n      children: state.left ? '>' : '<'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SwipeableDrawer, {\n      anchor: 'left',\n      open: state.left,\n      onClose: toggleDrawer('left', false),\n      onOpen: toggleDrawer('left', true),\n      children: list('left')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SDrawer, \"8M7uU2tTAesovwjiKIfbQZeT5Xc=\", false, function () {\n  return [useStyles];\n});\n\n_c = SDrawer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SDrawer\");","map":{"version":3,"sources":["/Users/weslleybraga/Documents/GitHub/chart-me/client/src/components/SDrawer/index.tsx"],"names":["React","clsx","makeStyles","SwipeableDrawer","Button","List","ListItemIcon","ListItemText","FaMusic","ListItem","useStyles","list","width","fullList","root","overflowY","SDrawer","charts","handleSelectChart","classes","state","setState","useState","top","left","bottom","right","toggleDrawer","anchor","open","event","type","key","map","chart","i","id","title"],"mappings":"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","sourcesContent":["import React from 'react'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\nimport Button from '@material-ui/core/Button'\nimport List from '@material-ui/core/List'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport { FaMusic } from 'react-icons/fa'\nimport ListItem from '@material-ui/core/ListItem'\n\nconst useStyles = makeStyles({\n    list: {\n        width: 250\n    },\n    fullList: {\n        width: 'auto'\n    },\n    root: {\n        overflowY: 'auto'\n    }\n})\nexport interface SDrawerProps {\n    charts: any[]\n    handleSelectChart: (id: any) => void\n}\nexport default function SDrawer ({\n    charts = [],\n    handleSelectChart\n}: SDrawerProps) {\n    const classes = useStyles()\n    const [state, setState] = React.useState<any>({\n        top: false,\n        left: false,\n        bottom: false,\n        right: false\n    })\n\n    const toggleDrawer = (anchor: string, open: boolean) => (event: any) => {\n        if (\n            event &&\n            event.type === 'keydown' &&\n            (event.key === 'Tab' || event.key === 'Shift')\n        ) {\n            return\n        }\n\n        setState({ ...state, [anchor]: open })\n    }\n\n    const list = (anchor: string) => (\n        <div\n            className={clsx(classes.list, {\n                [classes.fullList]: anchor === 'top' || anchor === 'bottom'\n            })}\n            role=\"presentation\"\n            onClick={toggleDrawer(anchor, false)}\n            onKeyDown={toggleDrawer(anchor, false)}\n        >\n            <List>\n                {charts &&\n                    charts?.map((chart: any, i) => (\n                        <ListItem\n                            button\n                            key={`${i}-${chart?.title}`}\n                            onClick={() => handleSelectChart(chart.id)}\n                        >\n                            <ListItemIcon>\n                                <FaMusic />\n                            </ListItemIcon>\n                            <ListItemText primary={chart?.title} />\n                        </ListItem>\n                    ))}\n            </List>\n        </div>\n    )\n\n    return (\n        <>\n            <Button variant=\"contained\" onClick={toggleDrawer('left', true)}>\n                {state.left ? '>' : '<'}\n            </Button>\n            <SwipeableDrawer\n                anchor={'left'}\n                open={state.left}\n                onClose={toggleDrawer('left', false)}\n                onOpen={toggleDrawer('left', true)}\n            >\n                {list('left')}\n            </SwipeableDrawer>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}