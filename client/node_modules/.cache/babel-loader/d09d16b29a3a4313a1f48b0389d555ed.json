{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\nimport { fetchCharts, saveChart } from '../apis/chart.api';\nconst initialState = {\n  title: 'Song title - Artist/Band',\n  key: 'C',\n  bpm: 70,\n  sections: [],\n  entities: [],\n  isLoading: false\n};\nexport const fetchChartsAsync = createAsyncThunk('charts/fetchCharts', async () => {\n  return await fetchCharts();\n});\nexport const saveChartAsync = createAsyncThunk('charts/saveChart', async chart => {\n  return await saveChart(chart);\n});\nexport const chartSlice = createSlice({\n  name: 'chart',\n  initialState,\n  reducers: {\n    editTitle: (state, action) => {\n      state.title = action.payload;\n    },\n    editBpm: (state, action) => {\n      state.bpm = action.payload;\n    },\n    editKey: (state, action) => {\n      state.key = action.payload;\n    },\n    createSection: (state, action) => {\n      state.sections.push({\n        id: uuidv4(),\n        label: action.payload,\n        value: ''\n      });\n    },\n    editSectionValue: (state, action) => {\n      const targetSection = state.sections.find(section => section.id === action.payload.id);\n\n      if (targetSection) {\n        targetSection.value = action.payload.value;\n      }\n    },\n    deleteSection: (state, action) => {\n      state.sections = state.sections.filter(section => section.id !== action.payload.id);\n    },\n    loadSavedChart: (state, action) => {\n      const selectedChart = state.entities.find(e => e.id === action.payload);\n\n      if (selectedChart) {\n        return { ...state,\n          ...selectedChart\n        };\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchChartsAsync.fulfilled, (state, action) => {\n      state.entities = action.payload;\n      state.isLoading = false;\n    });\n    builder.addCase(fetchChartsAsync.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(saveChartAsync.fulfilled, (state, action) => {\n      const exists = state.entities.findIndex(e => e.title === action.payload.title);\n\n      if (exists !== -1) {\n        state.entities[exists] = action.payload;\n      } else {\n        state.entities.push(action.payload);\n      }\n\n      state.isLoading = false;\n    });\n    builder.addCase(saveChartAsync.pending, state => {\n      state.isLoading = true;\n    });\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  createSection,\n  editSectionValue,\n  deleteSection,\n  editTitle,\n  editBpm,\n  editKey,\n  loadSavedChart\n} = chartSlice.actions;\nexport default chartSlice.reducer;","map":{"version":3,"sources":["/Users/weslleybraga/Documents/GitHub/chart-me/client/src/redux/slices/chart.slice.ts"],"names":["createSlice","createAsyncThunk","v4","uuidv4","fetchCharts","saveChart","initialState","title","key","bpm","sections","entities","isLoading","fetchChartsAsync","saveChartAsync","chart","chartSlice","name","reducers","editTitle","state","action","payload","editBpm","editKey","createSection","push","id","label","value","editSectionValue","targetSection","find","section","deleteSection","filter","loadSavedChart","selectedChart","e","extraReducers","builder","addCase","fulfilled","pending","exists","findIndex","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { v4 as uuidv4 } from 'uuid'\nimport { fetchCharts, saveChart } from '../apis/chart.api'\ninterface Section {\n    value: string\n    label: string\n    id: string | number\n}\n\ninterface State {\n    title: string\n    key: string\n    bpm: number\n    sections: Section[]\n    entities: any[]\n    isLoading: boolean\n}\nconst initialState: State = {\n    title: 'Song title - Artist/Band',\n    key: 'C',\n    bpm: 70,\n    sections: [],\n    entities: [],\n    isLoading: false\n}\n\nexport const fetchChartsAsync = createAsyncThunk(\n    'charts/fetchCharts',\n    async () => {\n        return await fetchCharts()\n    }\n)\n\nexport const saveChartAsync = createAsyncThunk(\n    'charts/saveChart',\n    async (chart: Pick<State, 'title' & 'key' & 'bpm' & 'sections'>) => {\n        return await saveChart(chart)\n    }\n)\n\nexport const chartSlice = createSlice({\n    name: 'chart',\n    initialState,\n    reducers: {\n        editTitle: (state, action) => {\n            state.title = action.payload\n        },\n        editBpm: (state, action) => {\n            state.bpm = action.payload\n        },\n        editKey: (state, action) => {\n            state.key = action.payload\n        },\n        createSection: (state, action: { payload: string }) => {\n            state.sections.push({\n                id: uuidv4(),\n                label: action.payload,\n                value: ''\n            })\n        },\n        editSectionValue: (\n            state,\n            action: { payload: { id: string | number; value: string } }\n        ) => {\n            const targetSection = state.sections.find(\n                (section) => section.id === action.payload.id\n            )\n            if (targetSection) {\n                targetSection.value = action.payload.value\n            }\n        },\n        deleteSection: (state, action: { payload: { id: Section['id'] } }) => {\n            state.sections = state.sections.filter(\n                (section: Section) => section.id !== action.payload.id\n            )\n        },\n        loadSavedChart: (state, action) => {\n            const selectedChart = state.entities.find(\n                (e) => e.id === action.payload\n            )\n            if (selectedChart) {\n                return {\n                    ...state,\n                    ...selectedChart\n                }\n            }\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchChartsAsync.fulfilled, (state, action) => {\n            state.entities = action.payload\n            state.isLoading = false\n        })\n        builder.addCase(fetchChartsAsync.pending, (state) => {\n            state.isLoading = true\n        })\n        builder.addCase(saveChartAsync.fulfilled, (state, action) => {\n            const exists = state.entities.findIndex(e => e.title === action.payload.title)\n            if (exists !== -1) {\n                state.entities[exists] = action.payload\n            } else {\n                state.entities.push(action.payload)\n            }\n            state.isLoading = false\n        })\n        builder.addCase(saveChartAsync.pending, (state) => {\n            state.isLoading = true\n        })\n    }\n})\n\n// Action creators are generated for each case reducer function\nexport const {\n    createSection,\n    editSectionValue,\n    deleteSection,\n    editTitle,\n    editBpm,\n    editKey,\n    loadSavedChart\n} = chartSlice.actions\n\nexport default chartSlice.reducer\n"]},"metadata":{},"sourceType":"module"}